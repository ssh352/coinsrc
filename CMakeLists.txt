cmake_minimum_required(VERSION 2.8)
project(spot)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

include_directories(${PROJECT_SOURCE_DIR})

if(UNIX)
    message("************    set UNIX UNIX UNIX env var  ************")
    add_definitions(-D__LINUX__)
    add_definitions(-DOS_IS_LINUX)
    #编译动态库的需要这个设置
    #SET(BUILD_SHARED_LIBS ON)
    set(Debug_Mode $ENV{Debug_Mode})
    if(Debug_Mode STREQUAL "ON")
        message("************    build debug version    ************")
        set(CMAKE_BUILD_TYPE?Debug?CACHE?STRING?"set?build?type?to?debug")
        set(CMAKE_CXX_FLAGS "-g -pg -fpermissive")
        # set(CMAKE_C_FLAGS "-O0 -ggdb")
        set(CMAKE_CXX_FLAGS "-O0 -ggdb")
        add_definitions(-D__Debug_Mode__)
    else()
        message("************    build release version  ************")
        set(CMAKE_BUILD_TYPE "Release")
    endif()
else(UNIX)
    add_definitions(-D__WINDOWS__)
endif(UNIX)


set(TESTMODE $ENV{TESTMODE})
if(TESTMODE STREQUAL "ON")
    message("************    set TESTMODE yes var  ************")
    add_definitions(-D__TESTMODE__)
endif()

set(CRYPTO_Mode $ENV{CRYPTO_Mode})
if(CRYPTO_Mode STREQUAL "ON")
    message("************    set crypto curl lib env var  ************")
    add_definitions(-D__CRYPTO_Mode__)
endif()
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -fpermissive -finline-limit=1000 -DNDEBUG -ldl")

#set(CMAKE_CXX_FLAGS_RELEASE "-O2 -fpermissive -finline-limit=1000 -DNDEBUG -ldl")
include_directories(${PROJECT_SOURCE_DIR}/lib)
LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib/gtest)
LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib/gmock)
set(BOOST_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/boost_1_62_0_c17)
include_directories(${BOOST_INCLUDE_DIR})
LINK_DIRECTORIES(${BOOST_INCLUDE_DIR}/stage/lib)
set(CRYPTOPP_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/cryptopp)
include_directories(${CRYPTOPP_INCLUDE_DIR}/include)
LINK_DIRECTORIES(${CRYPTOPP_INCLUDE_DIR}/lib)

set(PCAP_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/libpcap)
include_directories(${PCAP_INCLUDE_DIR})
LINK_DIRECTORIES(${PCAP_INCLUDE_DIR})

set(RABBITMQ_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/librabbitmq)
include_directories(${RABBITMQ_INCLUDE_DIR})
LINK_DIRECTORIES(${RABBITMQ_INCLUDE_DIR})

set(GSL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/gsl2.7)
include_directories(${GSL_INCLUDE_DIR}/include)
LINK_DIRECTORIES(${GSL_INCLUDE_DIR}/lib)

set(EIGEN_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/eigen)
include_directories(${EIGEN_INCLUDE_DIR}/include)
LINK_DIRECTORIES(${EIGEN_INCLUDE_DIR}/lib)

set(PYTHON_DIR ${PROJECT_SOURCE_DIR}/lib/Python-3.8.6/linux)
include_directories(${PYTHON_DIR}/include)
LINK_DIRECTORIES(${PYTHON_DIR}/lib)

if(UNIX)
    set(CURL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/curl-7.85.0/linux)
    include_directories(${CURL_INCLUDE_DIR}/include)
    LINK_DIRECTORIES(${CURL_INCLUDE_DIR}/lib)
else(UNIX)
    if(CRYPTO_Mode STREQUAL "ON")
        message("************    Windows only - build spot for crypto curl lib  ************")
        set(CURL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/curl/win_vc10)
        include_directories(${CURL_INCLUDE_DIR}/include)
        LINK_DIRECTORIES(${CURL_INCLUDE_DIR}/lib)
    else()
        set(CURL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/curl/win)
        include_directories(${CURL_INCLUDE_DIR})
        LINK_DIRECTORIES(${CURL_INCLUDE_DIR})
    endif()
endif(UNIX)

if(CRYPTO_Mode STREQUAL "ON")
    set(OPENSSL_DIR ${PROJECT_SOURCE_DIR}/lib/openssl-3.1.3)
    if(UNIX)
        include_directories(${OPENSSL_DIR}/include)
        LINK_DIRECTORIES(${OPENSSL_DIR}/lib/linux)
    else(UNIX)
        include_directories(${OPENSSL_DIR}/include_win)
        LINK_DIRECTORIES(${OPENSSL_DIR}/lib/win/VC)
    endif(UNIX)
endif()

set(WEBSOCKET_DIR ${PROJECT_SOURCE_DIR}/lib/websocketpp)
include_directories(${WEBSOCKET_DIR})
LINK_DIRECTORIES(${WEBSOCKET_DIR})

set(REST_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/restful)
LINK_DIRECTORIES(${REST_INCLUDE_DIR}/lib)

set(WEB_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/websocket)
LINK_DIRECTORIES(${WEB_INCLUDE_DIR}/lib)

set(BASE_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/base)
LINK_DIRECTORIES(${BASE_INCLUDE_DIR}/lib)

set(I_Bian_MD $ENV{I_Bian_MD})
if ((DEFINED I_Bian_MD))
    add_definitions(-D__I_Bian_MD__)
    add_subdirectory(spot/bian)
    message("************    set I_Bian_MD xxxxxxxxxxxxxxxxxxxxxxxx  ************")
endif()

set(I_Bian_TD $ENV{I_Bian_TD})
if ((DEFINED I_Bian_TD))
    add_definitions(-D__I_Bian_TD__)
    if (NOT DEFINED I_Bian_MD)
        add_subdirectory(spot/bian)
    endif()
    message("************    set I_Bian_TD xxxxxxxxxxxxxxxxxxxxxxxx  ************")
endif()

set(I_Bybit_MD $ENV{I_Bybit_MD})
if ((DEFINED I_Bybit_MD))
    add_definitions(-D__I_Bybit_MD__)
    add_subdirectory(spot/bybit)
    message("************    set I_Bybit_MD xxxxxxxxxxxxxxxxxxxxxxxx  ************")
endif()

set(I_Bybit_TD $ENV{I_Bybit_TD})
if ((DEFINED I_Bybit_TD))
    add_definitions(-D__I_Bybit_TD__)
    if (NOT DEFINED I_Bybit_MD)
        add_subdirectory(spot/bybit)
    endif()
    message("************    set I_Bybit_TD xxxxxxxxxxxxxxxxxxxxxxxx  ************")
endif()

set(I_OKExV5_MD $ENV{I_OKExV5_MD})
if ((DEFINED I_OKExV5_MD))
    add_definitions(-D__I_OKExV5_MD__)
    add_subdirectory(spot/okex)
    message("************    set I_OKExV5_MD xxxxxxxxxxxxxxxxxxxxxxxx  ************")
endif()

set(I_OKExV5_TD $ENV{I_OKExV5_TD})
if ((DEFINED I_OKExV5_TD))
    add_definitions(-D__I_OKExV5_TD__)
    if (NOT DEFINED I_OKExV5_MD)
        add_subdirectory(spot/okex)
    endif()
    message("************    set I_OKExV5_TD xxxxxxxxxxxxxxxxxxxxxxxx  ************")
endif()

set(SHMMD_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/shmmd)
LINK_DIRECTORIES(${SHMMD_INCLUDE_DIR}/lib)

set(DIST_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/distributor)
LINK_DIRECTORIES(${DIST_INCLUDE_DIR}/lib)

set(CACHE_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/cache)
LINK_DIRECTORIES(${CACHE_INCLUDE_DIR}/lib)

# set(UTIL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/lib/utility)
# LINK_DIRECTORIES(${UTIL_INCLUDE_DIR}/lib)

add_subdirectory(spot/utility)
add_subdirectory(spot/risk)
add_subdirectory(spot/gateway)
add_subdirectory(spot/comm)
add_subdirectory(spot/strategy)
add_subdirectory(spot/sciComputeUti)

add_subdirectory(spot/net)
add_subdirectory(spot/trade)

add_subdirectory(spot/spotmd)


